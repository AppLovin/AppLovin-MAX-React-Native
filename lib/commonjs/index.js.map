{"version":3,"sources":["index.js"],"names":["AppLovinMAX","NativeModules","VERSION","ConsentDialogState","UNKNOWN","APPLIES","DOES_NOT_APPLY","AdViewPosition","TOP_CENTER","TOP_RIGHT","CENTERED","CENTER_LEFT","CENTER_RIGHT","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT","emitter","NativeEventEmitter","subscriptions","addEventListener","event","handler","subscription","addListener","removeEventListener","delete","initialize","sdkKey","callback","showInterstitial","adUnitId","showRewardedAd"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,0BAAxB;AAEA,MAAMC,OAAO,GAAG,OAAhB;AAEA;;;;;AAIA,MAAMC,kBAAkB,GAAG;AACzB;;;AAGAC,EAAAA,OAAO,EAAE,CAJgB;;AAMzB;;;AAGAC,EAAAA,OAAO,EAAE,CATgB;;AAWzB;;;AAGAC,EAAAA,cAAc,EAAE;AAdS,CAA3B;AAiBA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE,WADS;AAErBC,EAAAA,SAAS,EAAE,UAFU;AAGrBC,EAAAA,QAAQ,EAAE,UAHW;AAIrBC,EAAAA,WAAW,EAAE,YAJQ;AAKrBC,EAAAA,YAAY,EAAE,aALO;AAMrBC,EAAAA,WAAW,EAAE,YANQ;AAOrBC,EAAAA,aAAa,EAAE,cAPM;AAQrBC,EAAAA,YAAY,EAAE;AARO,CAAvB;AAWA,MAAMC,OAAO,GAAG,IAAIC,+BAAJ,CAAuBjB,WAAvB,CAAhB;AACA,MAAMkB,aAAa,GAAG,EAAtB;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3C,MAAIC,YAAY,GAAGN,OAAO,CAACO,WAAR,CAAoBH,KAApB,EAA2BC,OAA3B,CAAnB;AACAH,EAAAA,aAAa,CAACE,KAAD,CAAb,GAAuBE,YAAvB;AACD,CAHD;;AAKA,MAAME,mBAAmB,GAAIJ,KAAD,IAAW;AACrC,MAAIE,YAAY,GAAGJ,aAAa,CAACE,KAAD,CAAhC;AACA,MAAIE,YAAY,IAAI,IAApB,EAA0B;AAE1BJ,EAAAA,aAAa,CAACO,MAAd,CAAqBL,KAArB;AACA,SAAOE,YAAY,CAACF,KAAD,CAAnB;AACD,CAND;;+CASKpB,W;AACHG,EAAAA,kB;AACAI,EAAAA,c;AACAY,EAAAA,gB;AACAK,EAAAA,mB;;AACA;AACAE,EAAAA,UAAU,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC3B5B,IAAAA,WAAW,CAAC0B,UAAZ,CAAuBxB,OAAvB,EAAgCyB,MAAhC,EAAwCC,QAAxC,EAD2B,CACwB;AACpD,G;;AACD;AACAC,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACzB9B,IAAAA,WAAW,CAAC6B,gBAAZ,CAA6BC,QAA7B,EAAuC,EAAvC;AACD,G;;AACD;AACAC,EAAAA,cAAc,CAACD,QAAD,EAAW;AACvB9B,IAAAA,WAAW,CAAC+B,cAAZ,CAA2BD,QAA3B,EAAqC,EAArC;AACD","sourcesContent":["import { NativeModules, NativeEventEmitter } from 'react-native';\n\nconst { AppLovinMAX } = NativeModules;\n\nconst VERSION = '1.0.0';\n\n/**\n * This enum represents whether or not the consent dialog should be shown for this user.\n * The state where no such determination could be made is represented by `Unknown`.\n */\nconst ConsentDialogState = {\n  /**\n   * The consent dialog state could not be determined. This is likely due to SDK failing to initialize.\n   */\n  UNKNOWN: 0,\n\n  /**\n   * This user should be shown a consent dialog.\n   */\n  APPLIES: 1,\n\n  /**\n   * This user should not be shown a consent dialog.\n   */\n  DOES_NOT_APPLY: 2,\n};\n\nconst AdViewPosition = {\n  TOP_CENTER: 'TopCenter',\n  TOP_RIGHT: 'TopRight',\n  CENTERED: 'Centered',\n  CENTER_LEFT: 'CenterLeft',\n  CENTER_RIGHT: 'CenterRight',\n  BOTTOM_LEFT: 'BottomLeft',\n  BOTTOM_CENTER: 'BottomCenter',\n  BOTTOM_RIGHT: 'BottomRight',\n};\n\nconst emitter = new NativeEventEmitter(AppLovinMAX);\nconst subscriptions = {};\n\nconst addEventListener = (event, handler) => {\n  let subscription = emitter.addListener(event, handler);\n  subscriptions[event] = subscription;\n};\n\nconst removeEventListener = (event) => {\n  let subscription = subscriptions[event];\n  if (subscription == null) return;\n\n  subscriptions.delete(event);\n  delete subscription[event];\n};\n\nexport default {\n  ...AppLovinMAX,\n  ConsentDialogState,\n  AdViewPosition,\n  addEventListener,\n  removeEventListener,\n  // Use callback to avoid need for attaching listeners at top level on each re-render\n  initialize(sdkKey, callback) {\n    AppLovinMAX.initialize(VERSION, sdkKey, callback); // Inject VERSION into native code\n  },\n  // Support for showing ad without placement\n  showInterstitial(adUnitId) {\n    AppLovinMAX.showInterstitial(adUnitId, '');\n  },\n  // Support for showing ad without placement\n  showRewardedAd(adUnitId) {\n    AppLovinMAX.showRewardedAd(adUnitId, '');\n  },\n};\n"]}